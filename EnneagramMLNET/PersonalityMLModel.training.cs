// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace EnneagramMLNet
{
    public partial class PersonalityMLModel
    {
        public const string RetrainFilePath =  @"C:\Users\movus\Desktop\personality_dataset.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Q1", @"Q1"),new InputOutputColumnPair(@"Q2", @"Q2"),new InputOutputColumnPair(@"Q3", @"Q3"),new InputOutputColumnPair(@"Q4", @"Q4"),new InputOutputColumnPair(@"Q5", @"Q5"),new InputOutputColumnPair(@"Q6", @"Q6"),new InputOutputColumnPair(@"Q7", @"Q7"),new InputOutputColumnPair(@"Q8", @"Q8"),new InputOutputColumnPair(@"Q9", @"Q9"),new InputOutputColumnPair(@"Q10", @"Q10"),new InputOutputColumnPair(@"Q11", @"Q11"),new InputOutputColumnPair(@"Q12", @"Q12"),new InputOutputColumnPair(@"Q13", @"Q13"),new InputOutputColumnPair(@"Q14", @"Q14"),new InputOutputColumnPair(@"Q15", @"Q15"),new InputOutputColumnPair(@"Q16", @"Q16"),new InputOutputColumnPair(@"Q17", @"Q17"),new InputOutputColumnPair(@"Q18", @"Q18"),new InputOutputColumnPair(@"Q19", @"Q19"),new InputOutputColumnPair(@"Q20", @"Q20"),new InputOutputColumnPair(@"Q21", @"Q21"),new InputOutputColumnPair(@"Q22", @"Q22"),new InputOutputColumnPair(@"Q23", @"Q23"),new InputOutputColumnPair(@"Q24", @"Q24"),new InputOutputColumnPair(@"Q25", @"Q25"),new InputOutputColumnPair(@"Q26", @"Q26"),new InputOutputColumnPair(@"Q27", @"Q27"),new InputOutputColumnPair(@"Q28", @"Q28"),new InputOutputColumnPair(@"Q29", @"Q29"),new InputOutputColumnPair(@"Q30", @"Q30"),new InputOutputColumnPair(@"Q31", @"Q31"),new InputOutputColumnPair(@"Q32", @"Q32"),new InputOutputColumnPair(@"Q33", @"Q33"),new InputOutputColumnPair(@"Q34", @"Q34"),new InputOutputColumnPair(@"Q35", @"Q35"),new InputOutputColumnPair(@"Q36", @"Q36"),new InputOutputColumnPair(@"Q37", @"Q37"),new InputOutputColumnPair(@"Q38", @"Q38"),new InputOutputColumnPair(@"Q39", @"Q39"),new InputOutputColumnPair(@"Q40", @"Q40"),new InputOutputColumnPair(@"Q41", @"Q41"),new InputOutputColumnPair(@"Q42", @"Q42"),new InputOutputColumnPair(@"Q43", @"Q43"),new InputOutputColumnPair(@"Q44", @"Q44"),new InputOutputColumnPair(@"Q45", @"Q45"),new InputOutputColumnPair(@"Q46", @"Q46"),new InputOutputColumnPair(@"Q47", @"Q47"),new InputOutputColumnPair(@"Q48", @"Q48"),new InputOutputColumnPair(@"Q49", @"Q49"),new InputOutputColumnPair(@"Q50", @"Q50"),new InputOutputColumnPair(@"Q51", @"Q51"),new InputOutputColumnPair(@"Q52", @"Q52"),new InputOutputColumnPair(@"Q53", @"Q53"),new InputOutputColumnPair(@"Q54", @"Q54"),new InputOutputColumnPair(@"Q55", @"Q55"),new InputOutputColumnPair(@"Q56", @"Q56"),new InputOutputColumnPair(@"Q57", @"Q57"),new InputOutputColumnPair(@"Q58", @"Q58"),new InputOutputColumnPair(@"Q59", @"Q59"),new InputOutputColumnPair(@"Q60", @"Q60")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Q1",@"Q2",@"Q3",@"Q4",@"Q5",@"Q6",@"Q7",@"Q8",@"Q9",@"Q10",@"Q11",@"Q12",@"Q13",@"Q14",@"Q15",@"Q16",@"Q17",@"Q18",@"Q19",@"Q20",@"Q21",@"Q22",@"Q23",@"Q24",@"Q25",@"Q26",@"Q27",@"Q28",@"Q29",@"Q30",@"Q31",@"Q32",@"Q33",@"Q34",@"Q35",@"Q36",@"Q37",@"Q38",@"Q39",@"Q40",@"Q41",@"Q42",@"Q43",@"Q44",@"Q45",@"Q46",@"Q47",@"Q48",@"Q49",@"Q50",@"Q51",@"Q52",@"Q53",@"Q54",@"Q55",@"Q56",@"Q57",@"Q58",@"Q59",@"Q60"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Personality",inputColumnName:@"Personality",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LightGbm(new LightGbmMulticlassTrainer.Options(){NumberOfLeaves=8727,NumberOfIterations=844,MinimumExampleCountPerLeaf=47,LearningRate=0.0104965556944861,LabelColumnName=@"Personality",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=0.00115487964486313,FeatureFraction=0.99999999,L1Regularization=6.11275900453428E-08,L2Regularization=0.999999776672986},MaximumBinCountPerFeature=32}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
